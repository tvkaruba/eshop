@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>eShop Orders</PageTitle>

<h1>Ваши заказы</h1>

@if (orders == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID Заказа</th>
                <th>Статус</th>
                <th>Сумма</th>
                <th>Дата создания</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr class="@(highlightedOrderId.HasValue && highlightedOrderId.Value == order.OrderId ? "table-info" : "")">
                    <td>@order.OrderId</td>
                    <td>@order.Status</td>
                    <td>@order.TotalAmount</td>
                    <td>@order.CreatedAt.ToLocalTime()</td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="mt-3">
    <button class="btn btn-primary" @onclick="CreateNewOrder">Создать новый заказ</button>
    <button class="btn btn-success" @onclick="TopUpUserAccount">Пополнить счет на 1000</button>
</div>

<div class="toast-container position-fixed bottom-0 end-0 p-3">
    @foreach (var notification in notifications)
    {
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="me-auto">Уведомление</strong>
                <button type="button" class="btn-close" @onclick="() => RemoveNotification(notification)" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                @notification
            </div>
        </div>
    }
</div>

@code {
    private List<OrderDto>? orders;
    private HubConnection? hubConnection;
    private List<string> notifications = new();
    private Guid? highlightedOrderId;

    private readonly Guid userId = Guid.Parse("a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11");

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
        await ConfigureSignalR();
    }

    private async Task LoadOrders()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<GetUserOrdersResponse>($"api/orders/users/{userId}");
            if (response != null && response.Success)
            {
                orders = response.Orders.ToList();
            }
        }
        catch (Exception ex)
        {
            notifications.Add($"Ошибка при загрузке заказов: {ex.Message}");
        }
    }

    private async Task ConfigureSignalR()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri(Http.BaseAddress!, "orderStatusHub"))
            .Build();

        hubConnection.On<OrderStatusChangedNotification>("OrderStatusChanged", (notification) =>
        {
            var order = orders?.FirstOrDefault(o => o.OrderId == notification.OrderId);
            if (order != null)
            {
                order.Status = notification.Status;
                highlightedOrderId = notification.OrderId;
                notifications.Add(notification.Message);
                InvokeAsync(StateHasChanged);
                
                _ = Task.Delay(3000).ContinueWith(_ =>
                {
                    highlightedOrderId = null;
                    InvokeAsync(StateHasChanged);
                });
            }
        });

        try
        {
            await hubConnection.StartAsync();
            if (hubConnection.State == HubConnectionState.Connected)
            {
                await hubConnection.SendAsync("JoinUserGroup", userId.ToString());
                notifications.Add("Успешно подключено к уведомлениям.");
            }
        }
        catch (Exception ex)
        {
            notifications.Add($"Ошибка подключения к SignalR: {ex.Message}");
        }
        StateHasChanged();
    }
    
    private void RemoveNotification(string message)
    {
        notifications.Remove(message);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public record GetUserOrdersResponse(bool Success, string Message, OrderDto[] Orders, int TotalCount);
    public class OrderDto {
        public Guid OrderId { get; init; }
        public Guid UserId { get; init; }
        public string Status { get; set; }
        public double TotalAmount { get; init; }
        public DateTimeOffset CreatedAt { get; init; }
        public DateTimeOffset UpdatedAt { get; init; }
        public OrderItemDto[] Items { get; init; }
        public Guid PaymentTransactionId { get; init; }

        public OrderDto() { }

        [JsonConstructor]
        public OrderDto(Guid orderId, Guid userId, string status, double totalAmount, DateTimeOffset createdAt, DateTimeOffset updatedAt, OrderItemDto[] items, Guid paymentTransactionId)
        {
            OrderId = orderId;
            UserId = userId;
            Status = status;
            TotalAmount = totalAmount;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            Items = items;
            PaymentTransactionId = paymentTransactionId;
        }
    }
    public record OrderItemDto(Guid ProductId, string ProductName, int Quantity, decimal Price);
    public record OrderStatusChangedNotification(Guid OrderId, string Status, string Message);

    public record CreateOrderRequest(Guid UserId, List<OrderItemDto> Items);
    public record CreateOrderResponse(bool Success, string Message, Guid OrderId);

    private async Task CreateNewOrder()
    {
        try
        {
            var newOrderRequest = new CreateOrderRequest(
                userId,
                new List<OrderItemDto>
                {
                    new OrderItemDto(Guid.NewGuid(), "Ноутбук", 1, 999.99m),
                    new OrderItemDto(Guid.NewGuid(), "Мышь", 1, 25.50m)
                }
            );

            var response = await Http.PostAsJsonAsync("api/orders", newOrderRequest);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<CreateOrderResponse>();
                if (result != null && result.Success)
                {
                    notifications.Add($"Заказ {result.OrderId} успешно создан.");
                    await LoadOrders();
                }
                else
                {
                    notifications.Add($"Не удалось создать заказ: {result?.Message}");
                }
            }
            else
            {
                notifications.Add($"Ошибка при создании заказа: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            notifications.Add($"Исключение при создании заказа: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task TopUpUserAccount()
    {
        try
        {
            var topUpRequest = new { UserId = userId, Amount = 1000.0m };
            var response = await Http.PostAsJsonAsync("api/payments/accounts/topup", topUpRequest);
            if (response.IsSuccessStatusCode)
            {
                notifications.Add("Счет успешно пополнен на 1000.");
            }
            else
            {
                notifications.Add($"Ошибка при пополнении счета: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            notifications.Add($"Исключение при пополнении счета: {ex.Message}");
        }
        StateHasChanged();
    }
}
