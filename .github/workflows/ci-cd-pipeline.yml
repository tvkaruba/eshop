name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore eShop.sln

      - name: Build
        run: dotnet build eShop.sln --configuration Release --no-restore

      - name: Test
        run: dotnet test eShop.sln --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            **/bin/Release
            **/obj/Release
            ./coverage

  sonarqube:
    name: SonarQube Analysis
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner

      - name: Run SonarQube Analysis
        run: |
          dotnet sonarscanner begin /k:"tvkaruba_eshop" /o:"tvkaruba" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="${{ env.SONAR_TOKEN }}" /d:sonar.cs.opencover.reportsPaths="**/coverage/**/coverage.opencover.xml"
          dotnet build eShop.sln --no-restore
          dotnet sonarscanner end /d:sonar.login=${{ env.SONAR_TOKEN }}

  docker_build_and_push:
    name: Build and Push Docker images
    needs: sonarqube
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [payments-service, orders-service, api-gateway, es.client]
        include:
          - service: payments-service
            dockerfile: PaymentsService/Dockerfile
            image: eshop-payments-service
          - service: orders-service
            dockerfile: OrdersService/Dockerfile
            image: eshop-orders-service
          - service: api-gateway
            dockerfile: ApiGateway/Dockerfile
            image: eshop-api-gateway
          - service: es.client
            dockerfile: ES.Client/Dockerfile
            image: eshop-client

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_HUB_USERNAME }}/${{ matrix.image }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=short
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    needs: docker_build_and_push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Deploy notification
        run: |
          echo "Deployment would happen here with images:"
          echo "- ${{ env.DOCKER_HUB_USERNAME }}/eshop-payments-service:latest"
          echo "- ${{ env.DOCKER_HUB_USERNAME }}/eshop-orders-service:latest"
          echo "- ${{ env.DOCKER_HUB_USERNAME }}/eshop-api-gateway:latest"
          echo "- ${{ env.DOCKER_HUB_USERNAME }}/eshop-client:latest" 